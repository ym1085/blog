package com.cos.blog.service;import com.cos.blog.model.Board;import com.cos.blog.model.RoleType;import com.cos.blog.model.User;import com.cos.blog.repository.UserRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.annotation.Transient;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;@Service// 스프링이 컴포넌트 스캔을 통해서 bean에 등록public class UserService {   @Autowired   private UserRepository userRepository;   @Autowired   private BCryptPasswordEncoder encoder;   @Transactional  //성공하면 1 실패하면 rollback   public void join(User user){      String rawPassword = user.getPassword(); // 1234 원문      String encPassword = encoder.encode(rawPassword); // 해쉬암호.      user.setPassword(encPassword); // 변경.      user.setRole(RoleType.USER);      userRepository.save(user);   }   @Transactional   public void 회원수정(User user){      //수정시에는 영속성 컨텍스트 User 오브젝트를 영속화시키고, 영속화된 User 오브젝트를 수정      //select를 해서 User 오브젝트를 DB로부터 가져오는 이유는  영속화를 하기 위해서!!      //영속화된 오브젝트를 변경하면 자동으로 DB에 update문을 날려줌      User persistance = userRepository.findById(user.getId())             .orElseThrow(()->{                return new IllegalArgumentException("글 찾기 실패 : 아이디를 찾을 수 없습니다.");             }); // 영속화 완료      String rawPassowrd = user.getPassword();      String encPassword = encoder.encode(rawPassowrd);      persistance.setPassword(encPassword);      persistance.setEmail(user.getEmail());      //회원수정 함수 종료시 = 서비스 종료  -> 트랜잭션 종료 = commit 이 자동으로 됩니다.      // 영속화된 persistance 객체의 변화가 감지되면 더티체킹이 되어 update문을 날려줌.   }}