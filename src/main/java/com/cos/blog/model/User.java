package com.cos.blog.model;import java.sql.Timestamp;import java.time.LocalDateTime;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.EnumType;import javax.persistence.Enumerated;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import org.hibernate.annotations.ColumnDefault;import org.hibernate.annotations.CreationTimestamp;import lombok.AllArgsConstructor;import lombok.Builder;import lombok.Data;import lombok.NoArgsConstructor;import org.hibernate.annotations.DynamicInsert;//@Data//@NoArgsConstructor//@AllArgsConstructor//@Builder // 빌더 패턴!!//ORM -> Java(다른언어) Object -> 테이블로 매핑해주는 기술// @DynamicInsert // insert시에 null인 필드를 제외시켜준다.//ORM -> Object -> 테이블로 매핑 해주는 기술@Builder // 빌더 패턴,@Data@NoArgsConstructor@AllArgsConstructor@Entity ////@DynamicInsert insert시 null인 필드를 지켜준다.public class User {   @Id //Primary key   @GeneratedValue(strategy = GenerationType.IDENTITY) // 프로젝트에서 연결된 DB의 넘버링 전략을 따라간다.   private int id; // 시퀀스, auto_increment   @Column(nullable = false, length = 30)   private String username; // 아이디   @Column(nullable = false, length = 100) // 123456 => 해쉬 (비밀번호 암호화)   private String password;   @Column(nullable = false, length = 50)   private String email; // myEmail, my_email //현재 이 함수를 사용할 경우 에러 뜸.//   @ColumnDefault("user")   @Enumerated(EnumType.STRING)   private RoleType role; // Enum을 쓰는게 좋다. 현재 권한의 대한 함수임    //ADMIN, USER 강제적으로 권한이   // 내가 직접 시간을 넣으려면 Timestamp.valueOf(LocalDateTime.now())   @CreationTimestamp   private Timestamp createDate;}